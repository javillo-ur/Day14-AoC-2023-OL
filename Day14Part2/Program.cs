Console.WriteLine(new List<string[]>(){File.ReadAllLines("input.txt")}.Select(j => new{map = new System.Collections.Concurrent.ConcurrentDictionary<int, System.Collections.Concurrent.ConcurrentDictionary<int, int>>(j.SelectMany((row, y) => row.Select((col, x) => new{col, x}).Select(t => new Tuple<int,int, int>(t.col == '#' ? 1 : t.col == 'O' ? 2 : 0, t.x, y))).GroupBy(t => t.Item3).ToDictionary(t => t.Key, t => new System.Collections.Concurrent.ConcurrentDictionary<int, int>(t.ToDictionary(t => t.Item2, t => t.Item1)))),count = j.Length,width = j[0].Length}).Select(j => Enumerable.Range(0, 1000).Aggregate(new Tuple<bool, System.Collections.Concurrent.ConcurrentDictionary<int, System.Collections.Concurrent.ConcurrentDictionary<int, int>>, int>(true, j.map, j.count), (pret, curt) => Enumerable.Range(0, 4).Aggregate(new Tuple<bool, System.Collections.Concurrent.ConcurrentDictionary<int, System.Collections.Concurrent.ConcurrentDictionary<int, int>>, int>(true, pret.Item2, pret.Item3), (pre, cur) => new Tuple<bool, System.Collections.Concurrent.ConcurrentDictionary<int, System.Collections.Concurrent.ConcurrentDictionary<int, int>>, int>(true, new List<Tuple<bool, System.Collections.Concurrent.ConcurrentDictionary<int, System.Collections.Concurrent.ConcurrentDictionary<int, int>>, int>>{Enumerable.Range(0, pret.Item3).Aggregate(new Tuple<bool, System.Collections.Concurrent.ConcurrentDictionary<int, System.Collections.Concurrent.ConcurrentDictionary<int,int>>, int>(false, pre.Item2, pre.Item3), (previous, current) => previous.Item1 ? previous : new Tuple<bool, System.Collections.Concurrent.ConcurrentDictionary<int, System.Collections.Concurrent.ConcurrentDictionary<int,int>>, int>(pre.Item2.Keys.Select(y => pre.Item2[y].Keys.Where(x => pre.Item2[y][x] == 2).Select(x => y == 0 || pre.Item2[y-1][x] != 0 || !(pre.Item2[y-1].TryRemove(x, out _) && pre.Item2[y-1].TryAdd(x, 2) && pre.Item2[y].TryRemove(x, out _) && pre.Item2[y].TryAdd(x, 0))).ToList().All(t => t)).ToList().All(t => t), pre.Item2, pre.Item3))}.Select(t => new System.Collections.Concurrent.ConcurrentDictionary<int, System.Collections.Concurrent.ConcurrentDictionary<int,int>>(t.Item2.Keys.SelectMany(y => t.Item2[y].Keys.Select(x => new Tuple<int,int,int>(pre.Item3-y-1, x, t.Item2[y][x]))).GroupBy(t => t.Item2).ToDictionary(t => t.Key, t => new System.Collections.Concurrent.ConcurrentDictionary<int,int>(t.ToDictionary(t => t.Item1, t => t.Item3))))).First(), pre.Item2[0].Count)))).Select(j => Enumerable.Range(0, j.Item3).Aggregate(j, (previous, current) => previous.Item1 ? previous : new Tuple<bool, System.Collections.Concurrent.ConcurrentDictionary<int, System.Collections.Concurrent.ConcurrentDictionary<int,int>>, int>(j.Item2.Keys.Select(y => j.Item2[y].Keys.Where(x => j.Item2[y][x] == 2).Select(x => y == 0 || j.Item2[y-1][x] != 0 || !(j.Item2[y-1].TryRemove(x, out _) && j.Item2[y-1].TryAdd(x, 2) && j.Item2[y].TryRemove(x, out _) && j.Item2[y].TryAdd(x, 0))).ToList().All(t => t)).ToList().All(t => t), j.Item2, j.Item3))).Select(j => j.Item2.Keys.SelectMany(y => j.Item2[y].Keys.Where(x => j.Item2[y][x] == 2).Select(x => y)).Select(t => j.Item3 - t)).First().Sum(t => t));