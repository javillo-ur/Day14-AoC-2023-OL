Console.WriteLine(new List<string[]>(){File.ReadAllLines("input.txt")}.Select(j => new{map = new System.Collections.Concurrent.ConcurrentDictionary<int, System.Collections.Concurrent.ConcurrentDictionary<int,int>>(j.SelectMany((row, y) => row.Select((col, x) => new{col, x}).Select(t => new Tuple<int,int, int>(t.col == '#' ? 1 : t.col == 'O' ? 2 : 0, t.x, y))).GroupBy(t => t.Item3).ToDictionary(t => t.Key, t => new System.Collections.Concurrent.ConcurrentDictionary<int,int>(t.ToDictionary(t => t.Item2, t => t.Item1)))), count = j.Length, width = j[0].Length})
.Select(j => Enumerable.Range(0, j.count).Aggregate(new Tuple<bool, System.Collections.Concurrent.ConcurrentDictionary<int, System.Collections.Concurrent.ConcurrentDictionary<int,int>>, int>(false, j.map, j.count), (previous, current) => previous.Item1 ? previous : new Tuple<bool, System.Collections.Concurrent.ConcurrentDictionary<int, System.Collections.Concurrent.ConcurrentDictionary<int,int>>, int>(j.map.Keys.Select(y => j.map[y].Keys.Where(x => j.map[y][x] == 2).Select(x => y == 0 || j.map[y-1][x] != 0 || !(j.map[y-1].TryRemove(x, out _) && j.map[y-1].TryAdd(x, 2) && j.map[y].TryRemove(x, out _) && j.map[y].TryAdd(x, 0))).ToList().All(t => t)).ToList().All(t => t), j.map, j.count))).Select(j => j.Item2.Keys.SelectMany(y => j.Item2[y].Keys.Where(x => j.Item2[y][x] == 2).Select(x => y)).Select(t => j.Item3 - t)).First().Sum(t => t));